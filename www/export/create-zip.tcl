ad_page_contract {
    Export one course in IMS type
    @author Miguel Marin (miguelmarin@viaro.net)
    @author Viaro Networks www.viaro.net
} {
    man_id:notnull
    folder_id:notnull
}

set content_folder_id $folder_id
set user_id [ad_conn user_id]
set course_man_id $man_id
# - - - - - - - - - - - - - - - - - - - 
# We open a new file to write to it
# - - - - - - - - - - - - - - - - - - - 

set fid [open "/tmp/gimsmanifest.xml" w]

set line "<manifest xmlns:bb=\"http://www.blackboard.com/content-packaging/\" xmlns:dotLRN=\"http://dotlrn.org/content-packaging\" identifier=\""

# We get the manifest information
db_1row get_man_info { }
append line "$identifier\">"
puts $fid $line

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Now we are going to check if it has a metadata to insert that on the xml also
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if { $hasmetadata } {
    puts $fid "<metadata>"
    puts $fid "<!-- Generated by LORS-CENTRAL -->"
    db_1row get_metadata_info { } 
    puts $fid "    <schema>$schema</schema>"
    puts $fid "    <schemaversion>$schemaversion</schemaversion>"
    puts $fid "    <lom>"
    puts $fid "       <general>"
    puts $fid "          <title>"
    puts $fid "             <langstring xml:lang=\"$title_l\">$title_s</langstring>"
    puts $fid "          </title>"
    puts $fid "          <description>"
    puts $fid "             <langstring xml:lang=\"$descrip_l\">$descrip_s</langstring>"
    puts $fid "          </description>"
    puts $fid "       </general>"
    puts $fid "    </lom>"
    puts $fid "</metadata>"
}
	   
# - - - - - - - - - - - - - - - - - - - - - 
# We are goint to get all organizations
# - - - - - - - - - - - - - - - - - - - - - 

puts $fid "<organizations default=\"$orgs_default\">"
db_foreach get_organizations { } {
    puts $fid "   <organization identifier=\"$identifier\">"
    
    # - - - - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - 
    # We need to get all items and arrange them at the proper order to get
    # parent son relation reflected on test.xml
    # - - - - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - 
    set i 0
    set all_items [lors_central::export::get_items_xml -org_id $org_id]
    foreach item $all_items {
	set ims_item_id [lindex $item 0]
	set level [lindex $item 1]
	set indent ""
	for {set j 0 } { $j <= $level } {incr j} {
	    append indent "      "
	}
	db_1row get_item_info { }

	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
	# We add the res_id to the identifierref to avoid names conflicts since resources added
	# from other courses could have the same name.
	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

	puts $fid "$indent<item identifier=\"$identifier\" identifierref=\"$identifierref$item_res_id\">"
	puts $fid "$indent<title>$item_title</title>"
	set next_level [lindex [lindex $all_items [expr $i + 1]] 1]
	if { [empty_string_p $next_level] } {
	    set next_level 1
	}
	if { [string equal  $next_level $level] } {
	    puts $fid "$indent</item>"
	}
	if { $next_level < $level } {
	    puts $fid "$indent</item>"
	    for { set j 0 } { $j < [expr $level - $next_level] } { incr j } {
		puts $fid "$indent</item>"
	    }
	}
	incr i
    }
    puts $fid "</organization>"

}
puts $fid "</organizations>"


# - - - - - - - - - - - - - - - - - -
# Here we get all the resources
# - - - - - - - - - - - - - - - - - -
set orgs_list "("
db_foreach get_organizations { } {
    append orgs_list "$org_id,"
    puts $fid "<resources>"
    db_foreach get_resources { } {

	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
	# We add the res_id to the identifier to avoid names conflicts since resources added
	# from other courses could have the same name.
	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
	set line "<resource identifier=\"$identifier$res_id\" xml:base=\"$identifier\" type=\"$type\""
	if { ![empty_string_p $href]} {
	    append line " href=\"$href\">"
	    puts $fid $line
	    db_foreach get_files { } {
		puts $fid "<file href=\"$pathtofile\"></file>"
	    }
	} else {
	    append line ">"
	    puts $fid $line
	}
	puts $fid "</resource>"
    }
    puts $fid "</resources>"
}
append orgs_list "0)"

# - - - - - - - - - - - -
# Now we close the file
# - - - - - - - - - - - -

puts $fid "</manifest>"
close $fid


# - - - - - - - - - - -
# Creating zip file
# - - - - - - - - - - -


# publish the object to the file system
set in_path [ns_tmpnam]
exec mkdir $in_path

set file [lors_central::export::publish_object_to_file_system -object_id $content_folder_id -path $in_path -user_id $user_id]
set file_name [file tail $file]

set download_name "${file_name}.zip"

# - - - - - - - - - - - - - - - - - - - - - - - -
# We get rid of spaces since they are annoying
# - - - - - - - - - - - - - - - - - - - - - - - -
regsub -all { } $download_name {_} download_name

# - - - - - - - - - - - - - - - - - - - - 
# Create a temp dir to put the archive in
# - - - - - - - - - - - - - - - - - - - - 
set out_path [ns_tmpnam]
file mkdir $out_path
set out_file [file join ${out_path} ${download_name}]

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# We need to copy all files related to all resources that are not present on this folder
# This are the one that are on a different course
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
set extra_resources [db_list_of_lists get_other_resources { }]

foreach res $extra_resources {
    set path [db_string get_href { } ]
    set split_path [split $path "/"]
    if { [llength $split_path] <= 1 } {
	# - - - - - - - - - - - - - - -  
	# It just a file, copy the file
	# - - - - - - - - - - - - - - -  
	set file_id [db_string get_file { } -default ""]
	if { ![empty_string_p $file_id] } {
	    set filename [db_string get_filename { } -default ""]
	}
	set object_id [lors_central::get_item_id -revision_id $file_id]
	lors_central::export::publish_versioned_object_to_file_system -object_id $object_id \
	    -path "$file" -file_name $filename
    } else {
	# - - - - - - - - - - - - - - - - - - - - - - 
	# Is a folder, we need to create the folder
	# - - - - - - - - - - - - - - - - - - - - - - 
	if { ![empty_string_p [lindex $split_path 0]] } {
	    set folder_path [lindex $split_path 0]
	    set file_path [lindex $split_path 1]
	} else {
	    set folder_path [lindex $split_path 1]
	    set file_path [lindex $split_path 2]
	}
	with_catch errmsg {
	    exec bash -c "cd '$file'; mkdir $folder_path;"
	} {
	    # We don't need to create this folder since already exists
	}
	db_foreach get_resource_files {	} {
	    # - - - - - - - - 
	    # Copy all files
	    # - - - - - - - - 
	    set object_id [lors_central::get_item_id -revision_id $file_id]
	    lors_central::export::publish_versioned_object_to_file_system -object_id $object_id \
		-path "$file/$folder_path" -file_name $filename
	} if_no_rows {
	    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	    # This is a file that it's not present on ims_cp_files table ( URL )
	    # We need to get it from the folder directly, using res_id to get 
	    # man id to get the folder where the file is present
	    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	    set root_folder [lors_central::get_root_folder_id]
	    set man_id [db_string get_man_id { }]
	    set name [lors_central::get_course_name -man_id $man_id]
	    set content_folder [db_string get_content_folder { select item_id from cr_items where parent_id = :root_folder and name = :name }]
	    set folder_id [db_string get_folder_id { select item_id from cr_items where parent_id = :content_folder and name = :folder_path }]
	    set url_file_id [db_string get_url_file_id { select item_id from cr_items where parent_id = :folder_id and name = :file_path} ]
	    lors_central::export::publish_versioned_object_to_file_system -object_id $url_file_id \
		-path "$file/$folder_path" -file_name $file_path
	}
    }
}


set cmd "zip -r '$out_file' *"
set copy "cp /tmp/gimsmanifest.xml ./imsmanifest.xml"

# - - - - - - - - - - 
# create the archive
# - - - - - - - - - - 
with_catch errmsg {
    exec bash -c "cd '$file'; $copy; $cmd; cd -"
} {
    # some day we'll do something useful here
    error $errmsg
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# redirect the archive to index.vuh to be returned to the connection.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ad_returnredirect ".$out_file"



# - - - - - - - - - - - - - - - - - - -
# Removing temporary files and folders
# - - - - - - - - - - - - - - - - - - -

exec rm -fr $in_path
exec rm -fr $out_path
exec rm -fr "tmp/gimsmanifest.xml"


